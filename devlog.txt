Christopher Kim, Chesley Tan 
Team Name: JR Smith Lovers - Chess
Journal
2014-01-08: Encounter with partners, beginning of brainstorm for project ideas
2014-01-09: Chose Chess as the main focus of our project. 
2014-01-10: Chris Kim began the setup of the board after the team decided on using a double array composed of chess pieces as our chess board. In addition to our board, the birth of our chess pieces took place on this day by Chesley Tan.
2014-01-11: The coding of Natural movement and attack requirements of pieces started and finished by Chesley Tan.
2014-01-14: Pawn’s ability to move 2 spaces, implemented by Chesley Tan.
2014-01-15: Method regarding if the king is in checked implemented by Chris Kim, and the tracking of the king by Chesley Tan. 
2014-01-16: A linear equation solver method was created by Chesley Tan, which is used for checking for checkmate.
2014-01-17: Debugging took place.
2014-01-18: Once again, Debugging took place. In addition, Chesley Tan took care of En Passant implemented as well as checkmate.
2014-01-19: Rough layout of the GUI board uploaded by Chris Kim, more debugging took place by Chesley Tan. In addition, Chesley Tan took over the undo option in Chess, and successfully took care of it. 
2014-01-20: Added implementation of ActionListeners to the GUI by Chris Kim, finishing touches of the terminal-based chess game by Chesley Tan. 
2014-01-21: Finishing touches on the Chess Game, GUI abandoned. 

Obstacles Overcome: 
Ever since the start of creating Chess in Java, we both knew that coding for checkmate would be a daunting task along with the prospect of maximizing efficiency. We would have to check to see if the king was able to move out of check and if any other pieces were able to block the path of the check or eliminate the checker. However, Chesley Tan came up with an excellent idea of implementing Mathematics into the coding of checkmate. Since the spaces of our board was labeled with coordinates, Chesley decided on using slopes and linear equations to check on whether or not the movements of the Chess Pieces were valid and if the check could be intercepted. 
Another obstacle was the undo option. We knew that in practically every single Chess Application, there was an undo option located right next to the board. We wanted to implement this option into our own project, but it turned out to be a lot more challenging than we thought. However, Chesley Tan thought of keeping track of the movement of pieces by creating backup boards, using a delta compression method to conserve resources, which would keep track of the change in position of the pieces after each turn. 

Unresolved Issues: 
We wanted to implement a GUI right after we finished our terminal-based game. However, because our code was centered around the terminal and did not think about GUI, we were unable to implement changes to our code for the GUI with the time remaining. We did create an unfinished GUI for our project that did contain the setup of a standard chess board, using Jbuttons as spaces on the board. 

Cool Stuff Learned:
Mathematics will always be prevalent in the CS world. In particular, our coding for checking if the movements of certain pieces, such as the Bishop, Knight and the Queen, were valid involved the use of slope. In the coding of checkmate, checking whether or not certain Chess pieces could be used to block the path of check to the King involved the use of linear equations and their intersections. 

Mid-development Design Changes (and why): 
Previously, as mentioned before, we wanted our final product to contain a GUI acting as a chess board. However, with the problem of time and the combination of (in class) finals week, we decided on focusing solely on the terminal-based chess game. However, we are still proud of how it looks in the terminal, and how smoothly the game runs. 

Lessons Learned:
Chris Kim: Working with someone as exceptional as Chesley in coding was an awesome learning experience. Although I knew that efficiency was always important when coding for anything, through Chesley I learned that efficiency is undoubtedly one of the most important factors of coding. I also learned about the importance of managing my time better. Unlike other CS projects I’ve had, Chess was definitely the hardest to code. Thanks to Chesley and his constant hard work, I decided to move away from procrastination and manage my time more efficiently. Lastly, I learned that when coding, you should be as open-minded as possible. I don’t think I would’ve thought of using slope and linear equations as an essential part of my code if I coded Chess alone. In my next CS project, I plan on opening myself up to all the things we learn, not just in CS class. 

Chesley Tan: This project opened my eyes to how important even a basic knowledge of mathematics really is in the field of computer science. Mathematics has an infinite range of applications, and maximizing efficiency when completing a repetetive process is just one of them.  I learned how important regular debugging is and how to efficiently make use of diagnostic SOPs.  I learned to create a separate "diagnostic mode" when writing these diagnostic print statements so I wouldn't have to rewrite them every time I came back to the same location for a different problem. Perhaps one of the most important lessons I learned is how important good planning is: without good planning, it would be much more difficult to create a functional and stable model for a problem as complex as Chess. 
